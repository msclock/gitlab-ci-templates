# @Description template for path changes based on git subcommand diff
.path_filter:
  image: msclock/pre-commit:2023-10-03T10-20-49Z
  variables:
    # This is no useful option yet.
    WORKING_DIRECTORY: .
    # Git reference (e.g. branch name) from which the changes will be detected.
    # Useful when workflow can be triggered only on the default branch (e.g. repository_dispatch event)
    # but you want to get changes on a different branch.
    # This option is ignored if pipeline is triggered by pull_request event.
    # default: $CI_COMMIT_BRANCH
    REF: $CI_COMMIT_BRANCH
    # Branch, tag, or commit SHA against which the changes will be detected.
    # If it references the same branch it was pushed to,
    # changes are detected against the most recent commit before the push.
    # Otherwise, it uses git merge-base to find the best common ancestor between
    # current branch (HEAD) and base.
    # When merge-base is found, it's used for change detection - only changes
    # introduced by the current branch are considered.
    # All files are considered as added if there is no common ancestor with
    # base branch or no previous commit.
    # This option is ignored if pipeline is triggered by pull_request event.
    # Default: repository default branch (e.g. $CI_DEFAULT_BRANCH)
    BASE: $CI_DEFAULT_BRANCH
    # Defines filters applied to detected changed files.
    # Each filter has a name and a list of rules.
    # Rule is a glob expression - paths of all changed
    # files are matched against it.
    FILTERS: ''
    # Enables listing of files matching the filter:
    #   'none'  - Disables listing of matching files (default).
    #   'csv'   - Coma separated list of filenames.
    #             If needed, it uses double quotes to wrap filename with unsafe characters.
    #   'json'  - File paths are formatted as JSON array.
    #   'shell' - Space delimited list usable as command-line argument list in Linux shell.
    #             If needed, it uses single or double quotes to wrap filename with unsafe characters.
    #   'escape'- Space delimited list usable as command-line argument list in Linux shell.
    #             Backslash escapes every potentially unsafe character.
    # Default: none
    LIST_FILES: none
    # Initial fetch depth for detecting changes
    INITIAL_FETCH_DEPTH: '30'
  before_script:
    - |
      apt update && apt install jq -y
  script:
    - !reference [.security_git_config, script]
    - |
      # Set the working directory if provided
      if [[ -n "$WORKING_DIRECTORY" ]]; then
        cd "$WORKING_DIRECTORY"
      fi

      if [[ -z "$FILTERS" ]]; then
        echo "Invalid FILTERS configuration."
        exit 1
      fi

      # Detect changes
      # If in pr, detect changes against pr target branch
      if [[ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]]; then
        git fetch origin --force $CI_MERGE_REQUEST_TARGET_BRANCH_NAME:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        all_changes_output=$(git diff --no-renames --name-status $CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
      else
        # Ensure on the branch we want to detect changes against
        git branch -D $REF || true
        git fetch origin --depth=$INITIAL_FETCH_DEPTH --force $REF
        git checkout --force "$REF"

        if [[ $BASE == $REF ]]; then
          if [[ $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000" ]] && git rev-list $REF | grep $CI_COMMIT_BEFORE_SHA > /dev/null; then
            _against_base=$CI_COMMIT_BEFORE_SHA
          else
            _against_base=$(git rev-parse HEAD~1)
          fi
        else
          git branch -D $BASE || true
          git fetch origin --depth=$INITIAL_FETCH_DEPTH --force "$BASE":$CI_JOB_ID
          _against_base=$(git merge-base $CI_JOB_ID $REF)
        fi

        all_changes_output=$(git diff --no-renames --name-status $_against_base..$REF)
        git branch -D $CI_JOB_ID $BASE || true
      fi

      # Expose to dotenv artifact
      function expose() {
        expose_key=$1
        content=${2%'\n'} # trim the newline

        case "$LIST_FILES" in
          csv)
            content=$(echo -e "$content" | awk '{print "\""$2"\""}'| paste -sd ",")
            ;;
          json)
            content=$(echo -e "$content" | awk '{print $2}' | jq -R . | jq -s .)
            ;;
          shell)
            content=$(echo -e "$content" | awk '{print $2}' | xargs -I{} echo -e "{}")
            ;;
          escape)
            content=$(echo -e "$content" | awk '{print $2}' | xargs -I{} echo -e "{}" | sed 's/[^a-zA-Z0-9,._+:@%/-]/\\&/g')
            ;;
        esac

        echo "$expose_key=${content//$'\n'/\\n}" >> filter.env # escape new line into dotenv
      }

      echo -e "all_changes_output:\n$all_changes_output"
      echo "raw_all_changes_output='${all_changes_output//$'\n'/\\n}'" > filter.env
      expose "all_changes_output" "$all_changes_output"

      keys=$(echo "$FILTERS" | jq -r "keys[]")
      declare -A patterns_map
      for category in $keys; do
        patterns_map["$category"]=$(echo -e "$FILTERS" | jq -r ".$category[]")
      done

      for category in "${!patterns_map[@]}"; do
        patterns="${patterns_map[$category]}"
        echo -e "patterns from $category:\n${patterns[@]}"
        changes=""
        while IFS= read -r line; do
          filename=$(echo "$line" | awk '{print $2}')
          for pattern in $patterns; do
            if echo "$filename" | grep -Pq "$pattern"; then
              changes+="$line\n"
              break
            fi
          done
        done <<< "$all_changes_output"

        echo -e "changes from $category:\n$changes"
        expose "$category" "$changes"
      done
  artifacts:
    reports:
      dotenv: filter.env
