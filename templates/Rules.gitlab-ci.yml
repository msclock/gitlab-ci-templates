# @Description common rules
.rules:
  Merge Request:
    if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  Schedule:
    if: $CI_PIPELINE_SOURCE == 'schedule'
  Branch:
    if: $CI_COMMIT_BRANCH
  Always:
    when: always
  Avoid MR Duplication Pipeline:
    if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
    when: never
  Skip MR:
    if: |
      $RULE_SKIP_MR_PIPELINE &&
      $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  Skip Branch Pipeline:
    if: |
      $RULE_SKIP_BRANCH_PIPELINE &&
      $CI_COMMIT_BRANCH
    when: never
  Release:
    # The following regular expression matches version numbers with optional
    # build identifiers as defined by the semantic versioning specification
    # v2.0.0.
    #
    # It specifically does _not_ include prerelease versions! See the
    # `Prerelease` scenario for those.
    #
    # See https://regex101.com/r/mdR6a9 for unit tests
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
  Prerelease:
    # The following regular expression matches version numbers indicating
    # prereleases with optional build identifiers as defined by the semantic
    # versioning specification v2.0.0.
    #
    # See https://regex101.com/r/7CSaNc for unit tests
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
  Skip Release Commits:
    # Never run for `chore(release):` commits that are created for releases by
    # the process itself
    if: $CI_COMMIT_MESSAGE =~ /^(chore\(release\))/
    when: never
