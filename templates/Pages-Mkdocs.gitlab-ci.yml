# This presents a template for making mkdocs pages deployment.
# See https://www.mkdocs.org/.
#
# To configure the template refers to the variables section.

# @Description template for deploy mkdocs
.pages_mkdocs:
  stage: deploy
  variables:
    # The pip cache
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
    # The branch to deploy when enable the VERSION_DOCS.
    PAGES_BRANCH: gl-pages
    # Specifies whether to use mike to deploy mkdocs docs.
    # And Only deploy when enable the VERSION_DOCS.
    VERSION_DOCS: ''
    # Optional. Default to $CI_DEFAULT_BRANCH. Specifies the branch to deploy
    # the dev revision docs when enable the VERSION_DOCS.
    VERSION_DEV_DOCS_BRANCH: $CI_DEFAULT_BRANCH
    # Selects the version mode to publish the pages which will be parsed from
    # $CI_COMMIT_TAG according to semantic versioning:
    # - 'major': only create a versioning deployment documentation on major release.
    # - 'minor': only create a versioning deployment documentation on minor release.
    # - 'patch': only create a versioning deployment documentation on patch release.
    # - 'none': only create a versioning deployment documentation called 'latest'.
    VERSION_MODE: minor
    # Specifies the extra mkdocs plugins.
    MKDOCS_EXTRA_PLUGINS: ''
  image: python:3.11-bullseye
  dependencies: []
  script:
    - !reference [.security_check_sensible, script]
    - !reference [.security_git_config, script]
    - |
      echo "Install mkdocs plugins: mkdocs ${MKDOCS_EXTRA_PLUGINS}" >> /dev/stderr
      pip install mkdocs==1.5.3 ${MKDOCS_EXTRA_PLUGINS}

      # Only deploy when enable the VERSION_DOCS
      if [[ -n "$VERSION_DOCS" ]] && \
        { [[ -n "$CI_COMMIT_TAG" ]] || \
          [[ -n "$CI_COMMIT_BRANCH" && \
            "$CI_COMMIT_BRANCH" == "$VERSION_DEV_DOCS_BRANCH" ]]; }; then
          pip install mike==2.0.0

          git fetch origin $PAGES_BRANCH || echo "Pages branch not deployed yet." >> /dev/stderr
          git checkout -b $PAGES_BRANCH origin/$PAGES_BRANCH || echo "Pages branch not deployed yet." >> /dev/stderr
          git checkout $CI_COMMIT_SHA

          mike_common_options=(--deploy-prefix public --push --branch $PAGES_BRANCH)
          if [[ -n "$CI_COMMIT_BRANCH" ]]; then
            mike deploy "${mike_common_options[@]}" --update-aliases dev
          fi

          if [[ -n "$CI_COMMIT_TAG" ]]; then
            # Use regular expressions to extract major, minor and patch versions
            # from CI_COMMIT_TAG.
            case "$VERSION_MODE" in
              "major")
                update_aliases=$(echo $CI_COMMIT_TAG | grep -oP "\K^v?\d+")
                ;;
              "minor")
                update_aliases=$(echo $CI_COMMIT_TAG | grep -oP "\K^v?\d+\.\d+")
                ;;
              "patch")
                update_aliases=$(echo $CI_COMMIT_TAG | grep -oP "\K^v?\d+\.\d+\.\d+")
                ;;
              "none")
                update_aliases="latest"
                ;;
              *)
                echo "VERSION_MODE only works on semver or 'none'" >> /dev/stderr
                exit 1
            esac
            echo "Update aliases to $update_aliases using mike" >> /dev/stderr
            mike deploy "${mike_common_options[@]}" --update-aliases ${update_aliases} latest
            mike set-default "${mike_common_options[@]}" latest
          fi

          git checkout $PAGES_BRANCH -- public/
          exit 0
      fi
      mkdocs build --site-dir public/ --no-directory-urls
  artifacts:
    paths:
      - public/
  cache:
    key: pages-pip-cache
    paths:
      - $PIP_CACHE_DIR
