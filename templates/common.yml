# @Description make changes on codebase
.make_changes:
  variables:
    MAKE_CHANGES_DEBUG: "${CI_DEBUG_TRACE}"
    MAKE_CHANGES_MSG: ""
    MAKE_CHANGES_ON_PR: ""
    MAKE_CHANGES_EXIT: ""
  script:
    - &template_make_changes_script |
      if [[ -n "$MAKE_CHANGES_DEBUG" ]]; then
          echo "Enable make changes debug, and some sensible info will be printed.Please be careful!!!"
          set -x
      fi

      if [[ -z "$MAKE_CHANGES_ACCESS_TOKEN" ]]; then
          echo "The job has no access token found." >>/dev/stderr
          echo "To enable automatic to commit changes, please create a project access token with repository write scope and set the MAKE_CHANGES_ACCESS_TOKEN variable" >/dev/stderr
          exit 1
      fi

      if [[ -n "$(git status -s)" ]]; then

        # Prepare config for git
        if [[ -n "$CI_COMMIT_BRANCH" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${MAKE_CHANGES_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
        fi
        if [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${MAKE_CHANGES_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git"
        fi

        git config --global user.name "GitLab Ci"
        git config --global user.email "gitlab-ci@no-reply.com"

        if [[ -n "$MAKE_CHANGES_ON_PR" ]]; then
            temp_branch=temp_black_${CI_COMMIT_SHA:0:12}
            git checkout -B "$temp_branch" --
        fi

        git add -u .
        git commit -m "${MAKE_CHANGES_MSG:-ci: automated commit changes from CI job}" -m "job url:$CI_JOB_URL"
        if [[ -n "$MAKE_CHANGES_ON_PR" ]]; then
            git push origin "$temp_branch"
            curl --header "PRIVATE-TOKEN: $MAKE_CHANGES_ACCESS_TOKEN" \
                --request POST "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/merge_requests" \
                --form "source_branch=$temp_branch" \
                --form "target_branch=$CI_COMMIT_REF_NAME" \
                --form "title=PR from $temp_branch"
        elif [[ -n "$CI_COMMIT_BRANCH" ]]; then
            git push origin HEAD:"$CI_COMMIT_BRANCH"
        elif [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
            git push origin HEAD:"$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        fi
      else
        echo "Working tree clean. Nothing to make changes.";
      fi

      if [[ -z "$MAKE_CHANGES_EXIT" ]]; then
          exit 0
      else
          exit 1
      fi

# @Description simple check codebase
.correct_code_state:
  script:
    - &template_correct_code_state_script |
      set -x

      status=0
      $check_command || status=$?
      if [[ $status -ne 0 ]]; then
          $correct_command
      fi

      # Exit using status without CI envs
      if [[ -z "$CI" ]]; then
          echo 'finish formatting locally'
          exit $status
      fi

# @Description proxy backend based on clash
.after_proxy_service:
  services:
    - name: ghcr.io/dreamacro/clash
      alias: proxy_backend
      entrypoint:
        - ""
      command:
        - sh
        - -c
        - "set -xe && wget $CLASH_PROXY_SUB -O /root/.config/clash/config.yaml && ./clash"
  variables:
    CLASH_PROXY_SUB: ""
    PROXY_WHITE_LIST: "localhost,127.0.0.1,192.168.0.0/16,$CI_SERVER_HOST"
  before_script:
    - &template_after_proxy_service_before_script |
      if [[ -z "$CLASH_PROXY_SUB" ]]; then
        echo "No proxy subscribe found." >> /dev/stderr
        exit 1
      fi
      export HTTP_PROXY="http://proxy_backend:7890"
      export HTTPS_PROXY="http://proxy_backend:7890"
      export NO_PROXY="$PROXY_WHITE_LIST"
      sleep 3

.pre-commit_script: &pre-commit_script |
  if [[ -n "$PRE_COMMIT_DEBUG" ]]; then
      echo "Enable pre-commit debug, and some sensible info will be printed.Please be careful!!!"
      set -x
  fi

  if [[ -n "$PRE_COMMIT_AUTO_FIX_BRANCH_ONLY" && -n "$PRE_COMMIT_AUTO_FIX_MR_ONLY" ]]; then
      echo "invalid configuration. PRE_COMMIT_AUTO_FIX_BRANCH_ONLY and PRE_COMMIT_AUTO_FIX_MR_ONLY are mutually exclusive"
      exit 1
  fi

  status=0

  pre-commit run --all-files || status=$?
  if [[ $status -eq 0 ]]; then
      exit 0  # we're all good, pipeline can proceed
  fi

  if [[ -z "$PRE_COMMIT_AUTO_FIX" ]]; then
      exit $status # fail the job with status holding exit code
  fi

# @Description template based on pre-commit
.pre-commit:
  stage: .pre
  rules:
    - if: "$PRE_COMMIT_SKIP_BRANCH_PIPELINE && $CI_COMMIT_BRANCH"
      when: never
    - if: '$PRE_COMMIT_SKIP_MR_PIPELINE && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$PRE_COMMIT_AUTO_FIX_BRANCH_ONLY && $CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        PRE_COMMIT_AUTO_FIX: ""
      when: on_success
      exists:
        - .pre-commit-config.yaml
    - if: '$PRE_COMMIT_DEDUPLICATE_MR_AND_BRANCH == "true" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$PRE_COMMIT_AUTO_FIX_MR_ONLY && $CI_PIPELINE_SOURCE != "merge_request_event"'
      variables:
        PRE_COMMIT_AUTO_FIX: ""
      exists:
        - .pre-commit-config.yaml
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'
      variables: # we don't support autofix for merged_result or merge_train pipelines, configure branch fixing instead
        PRE_COMMIT_AUTO_FIX: ""
      exists:
        - .pre-commit-config.yaml
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      exists:
        - .pre-commit-config.yaml
      when: on_success
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - .pre-commit-config.yaml
      when: on_success
    - when: never

  variables:
    PRE_COMMIT_AUTO_FIX: "1"
    PRE_COMMIT_DEDUPLICATE_MR_AND_BRANCH: "true"
    PRE_COMMIT_DEBUG: "${CI_DEBUG_TRACE}"
    MAKE_CHANGES_MSG: "ci: auto fixes from pre-commit"
    MAKE_CHANGES_EXIT: "1"
  image: registry.gitlab.com/yesolutions/docker-pre-commit

  extends:
    - .make_changes

  before_script:
    - &template_pre-commit_before_script |
      rm .git/hooks/post-commit .git/hooks/pre-push || true
      pip install pre-commit

  script:
    - &template_pre-commit_script [
        *pre-commit_script,
        *template_make_changes_script,
      ]

# @Description check codebase with pre-commit
.pre-commit-proxy:
  extends:
    - .pre-commit
    - .after_proxy_service
  before_script:
    - &pre-commit-proxy_before_script [
        *template_after_proxy_service_before_script,
        *template_pre-commit_before_script,
      ]
