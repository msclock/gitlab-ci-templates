# Collection for testing node applications with Jest in the supported Node versions.
# Assumes:
#   - Node-Test template is included
#   - Code coverage and junit reports are not saved for any of these versions
#   - intended to be run with Node-Build-Test collection

include:
  - remote: https://gitlab.com/msclock/gitlab-ci-templates/-/raw/v2.5.49/jobs/Node-LTS-Test-Win.gitlab-ci.yml

.node_test_nocoverage:
  extends:
    - .node_test
  script:
    - !reference [.node_test, script]
    - npm test -- --collectCoverage false

# Execute tests under v20 (current)
node_20_test:
  extends: .node_test_nocoverage
  image: node:20-alpine

# Execute tests under LTS with yarn
node_lts_yarn_test:
  extends:
    - .node
  stage: test
  allow_failure: true
  before_script:
    - rm -f package-lock.json
    - yarn install
  script:
    - yarn test --collectCoverage false

# Execute tests under LTS with yarn 2 (with PnP)
node_lts_yarn_pnp_test:
  extends: node_lts_yarn_test
  before_script:
    - rm -f package-lock.json
    - yarn set version berry
    - export YARN_ENABLE_IMMUTABLE_INSTALLS=false
    - yarn install
  artifacts:
    # On failure save yarn files to troubleshoot module errors
    when: on_failure
    paths:
      - .pnp.cjs
      - .yarnrc.yml
      - yarn.lock

# Execute tests under LTS with pnpm
node_lts_pnpm_test:
  extends: .node_test_nocoverage
  allow_failure: true
  before_script:
    # Use npx to avoid issues with global installs as a non-root user,
    # which is the case in some containers.
    # Use --force to avoid unmet peer dependency issues. If those
    # dependencies are required, the tests will fail.
    - npx pnpm install || echo "Trap missing peerDependencies, tests will fail with real issues"
  script:
    - npx pnpm test -- --collectCoverage false
