# Job to scan Docker images for vulnerabilities with Anchore (https://github.com/anchore/anchore-engine),
# based on the implementation in https://anchore.com/blog/integrating-anchore-scanning-with-gitlab/ and
# the example in https://gitlab.com/anchore/gitlab-demo/blob/master/.gitlab-ci.yml).

anchore:
  stage: container-test
  variables:
    ANCHORE_CLI_URL: http://anchore-engine:8228/v1
    GIT_STRATEGY: none
    # These are the variables and default values for repository/tag in the container scanning job.
    # They are used here so they can be overridden once globally (if desired).
    CI_IMAGE_FULL_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    CI_IMAGE_IDENTITY_TAG: $CI_COMMIT_SHA
  image: docker.io/anchore/inline-scan:latest
  services:
    - name: docker.io/anchore/inline-scan:latest
      alias: anchore-engine
      command: [start]
  script:
    - anchore-cli system wait
    - anchore-cli registry add "$CI_REGISTRY" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASSWORD" --skip-validate
    - anchore_ci_tools.py -a -r --timeout 500 --image $CI_IMAGE_FULL_NAME:$CI_IMAGE_IDENTITY_TAG

    # Policy report contains policies as well as results, so check for failure and fail job as appropriate
    - IMAGE_DIGEST=$(cat anchore-reports/*-details.json | jq '.[0].image_detail[0].digest') && echo $IMAGE_DIGEST
    - IMAGE_TAG=$(cat anchore-reports/*-details.json | jq '.[0].image_detail[0].fulltag') && echo $IMAGE_TAG
    - POLICY_RESULT=$(cat anchore-reports/*-policy.json | jq -r ".[0].$IMAGE_DIGEST.${IMAGE_TAG}[0].status") && echo $POLICY_RESULT
    - if [[ $POLICY_RESULT == "fail" ]]; then exit 2; fi
  allow_failure: true
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    when: always
    paths:
      - anchore-reports/*
