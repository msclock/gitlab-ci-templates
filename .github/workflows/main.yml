name: main

on:
  workflow_dispatch:
    inputs:
      on_changes_only:
        type: boolean
        description: on_changes_only
        default: false

      enabled:
        type: boolean
        description: enabled
        default: true

  workflow_call:
    inputs:
      on_changes_only:
        type: boolean
        description: on_changes_only
        default: false

      enabled:
        type: boolean
        description: enabled
        default: true

  push:
  pull_request:


jobs:

  pre-commit:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == github.event.repository.default_branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Require write permissions on workflow
          token: ${{ secrets.PERSONAL_TOKEN }}
          # Avoid checking out the repository in a detached state.
          ref: ${{ github.head_ref }}

      - name: Set up python
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4

      - name: Run pre-commit on codebase
        uses: pre-commit/action@v3.0.0

      - name: Auto commit action
        uses: stefanzweifel/git-auto-commit-action@v4
        if: failure() # Allow the step to run when pre-commit fails
        with:
          commit_message: 'ci: auto fixes from pre-commit'

  find-images:
    needs:
      - pre-commit
    if: ${{ ( ( github.event_name != 'workflow_dispatch' ) ) || inputs.enabled  }}
    runs-on: ubuntu-latest
    name: find images
    outputs:
      changed-images: ${{ steps.list-images.outputs.changed_images }}
      all-images: ${{ steps.list-images.outputs.all_images }}
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4

      - name: Display info
        run: |
          echo ${{ inputs.enabled  }}
          echo ${{ github.event_name  }}

      - name: List changed images
        id: list-images
        uses: ./.github/actions/list_changed
        with:
          path: .

  prepare-matrix:
    needs:
      - find-images
    runs-on: ubuntu-latest
    outputs:
      images_to_build: ${{ steps.resolve_images.outputs.images_to_build }}
      images_to_tag: ${{ steps.resolve_images.outputs.images_to_tag }}
    steps:
      - name: resolving images to build
        id: resolve_images
        run: |
          echo "images_to_tag=$(date -u +"%Y-%m-%dT%H-%M-%SZ")" >> $GITHUB_OUTPUT
          _gh_ev_name=${{ github.event_name }}
          if [ "$_gh_ev_name" == 'pull_request' ]; then
            echo 'images_to_build=${{ needs.find-images.outputs.changed-images }}' >> $GITHUB_OUTPUT

          elif [ "$_gh_ev_name" == 'push' ]; then
            echo 'images_to_build=${{ needs.find-images.outputs.changed-images }}' >> $GITHUB_OUTPUT

          elif [ "$_gh_ev_name" == 'workflow_dispatch' ] || [ "$_gh_ev_name" == 'workflow_call' ]; then

            if [ ${{ inputs.on_changes_only }} == 'true' ]; then
              echo 'images_to_build=${{ needs.find-images.outputs.changed-images }}' >> $GITHUB_OUTPUT
            else
              echo 'images_to_build=${{ needs.find-images.outputs.all-images }}' >> $GITHUB_OUTPUT
            fi
          fi

  build-image:
    if: ${{ fromJson(needs.prepare-matrix.outputs.images_to_build)[0] != null }}
    needs:
      - find-images
      - prepare-matrix
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare-matrix.outputs.images_to_build) }}
    permissions:
      contents: write # Commit requires the write permission

    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Install latest devcontainer CLI
        run: npm install -g @devcontainers/cli

      - name: Build image on '${{ matrix.image }}'
        run: |
          workspace=images/${{ matrix.image }}
          image_name=msclock/${{ matrix.image }}:${{ needs.prepare-matrix.outputs.images_to_tag }}
          echo "build image $image_name in the workspace $workspace"

          devcontainer build \
            --workspace-folder $workspace \
            --image-name $image_name \
            --image-name msclock/${{ matrix.image }}:latest \
            --push=true

  pin_image_version:
    if: ${{ fromJson(needs.prepare-matrix.outputs.images_to_build)[0] != null }}
    needs:
      - find-images
      - prepare-matrix
      - build-image
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN  }}
          ref: ${{ github.head_ref }}

      - name: Pin image version
        run: |
          set -e

          square_comma_images=${{ needs.prepare-matrix.outputs.images_to_build }}
          tag=${{ needs.prepare-matrix.outputs.images_to_tag }}
          readarray -t image_array <<< "$(echo $square_comma_images | tr -d '[]' | tr ',' '\n')"
          for i in "${image_array[@]}"; do
            _prefix=msclock/$i
            _image_name=$_prefix:$tag
            echo "pin tag $tag on the image $i"
            sed -i "s@$_prefix.*@$_image_name@g" ./templates/common.yml
          done

      - name: Auto commit to pin image
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'feat: pin new image tag'

  gitlab:
    runs-on: ubuntu-latest
    if: >-
      github.ref_name == github.event.repository.default_branch &&
      needs.prepare-matrix.outputs.images_to_build == '[]'
    needs:
      - prepare-matrix
    name: mirror to gitlab

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: mirror-to-gitlab
        uses: yesolutions/mirror-action@master
        with:
          REMOTE: https://gitlab.com/msclock/gitlab-ci-templates.git
          GIT_USERNAME: ${{ github.repository_owner }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
          PUSH_ALL_REFS: 'false'
          GIT_PUSH_ARGS: --force --prune
